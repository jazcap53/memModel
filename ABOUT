MemModel

The program driver:

1) 
Creates an instance of the Memory class, including a
    std::array<Page, Globals::NUM_MEM_PAGES> theMem
where each Page holds an
    unsigned char dat[Globals::BYTES_PER_PAGE]
Each location in theMem is referred to as a 'slot' in memory.

2)
Creates an instance of the ChangeLog class, including a
    std::map<uint64_t, std::list<Change>> theLog
which maps block numbers to Change's. Each Change is a container for altered
lines, holding a C-style array
    uint64_t selectors[Globals::NUM_SELECTORS]
and a
    std::deque<Globals::Line> newData
Line is typedef'd as 
    std::array<unsigned char, Globals::BYTES_PER_LINE>
Each Change instance contains all of the Lines, for a given page, that have been 
altered. Each bit in a selector tracks whether a particular Line in that page has
been altered. 

3)
Creates an instance of the Status class, which simply holds a fileName

4)
Creates an instance of the SimDisk class, which reads or creates a disk_file,
reads or creates a jrnl_file, closes both files, and opens the disk_file as a
stream for binary update
 
5)
Creates an instance of the Journal class, which opens the jrnl_file for binary
update, and allocates a buffer of
    <std::pair<uint64_t, Page>>
in which (block number, Page) pairs may be created to update the pages with
Change's held in the journal.

6)
Creates an instance of the MemMan class which will process requests sent to it by
the client (currently the driver). 


Each request is for a read or a write on a 
given block number. The requests are passed as Change's, so that each request may
alter multiple lines on its block.

MemMan reads the requested block into a slot in memory from disk, via the open 
stream held by the SimDisk instance. The block is then read or written. 

A PageTable class instance is a member of MemMan. It holds a
    std::array<PgTabEntry, Globals::NUM_MEM_PAGES> pgTab
of page table entries. Each page table entry (PgTabEntry) holds the number of a 
block (page) currently in memory, the slot number in memory that the page 
occupies, and the last access time of the block. The PageTable is maintained as a
min heap ordered on the last access time.

When memory is full, a page is chosen for eviction using an LRU algorithm. Any 
changes made to the data in memory are copied to the ChangeLog instance. 
Periodically the change log is written to the journal, a disk file holding only 
changes that is maintained as a circular queue. At longer intervals, and on 
shutdown, the journal is purged to disk; at this point the changes are merged 
into the blocks on disk.
